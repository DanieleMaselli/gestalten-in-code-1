#includepath "~/Documents/;%USERPROFILE%Documents"; // eslint-disable-line#include "basiljs/bundle/basil.js"; // eslint-disable-line// based on this flash tutorial//  Scripting 3D in Flash//  by senocular// https://www.kirupa.com/developer/actionscript/3dindex.htm////  TODO: expolore the tutorial even more (e.g. camera)//var pw = 200; // for easier handlingvar ph = 200; // for easier handling// see https://en.wikipedia.org/wiki/Focal_lengthvar focalLength = 300;var camera = {  x:10,  y:10,  z:-300,  rotation:5};/** * creates a 3D point * @param  {Number} x the x location * @param  {Number} y the y location * @param  {Number} z the z location * @return {Object}   an Object with {x:Nmber, y:Number, z:Number} */var point = function(x, y, z) {  var point = {};  point.x = x;  point.y = y;  point.z = z;  return point;};/** * Converts a 3D point Object to screen coordiantes * @param  {Object} pointIn3D an Object created by the point function * @return {Object} an Object with {x:Number, y:Number} */var toScreen = function(pointIn3D) {  var pointIn2D = {};  pointIn3D.x -= camera.x;  pointIn3D.y -= camera.y;  pointIn3D.z -= camera.z;  var angle = Math.atan2(pointIn3D.z,pointIn3D.x );  var radius = Math.sqrt(pointIn3D.x * pointIn3D.x + pointIn3D.z * pointIn3D.z);  pointIn3D.x = Math.cos(angle + camera.rotation) * radius;  pointIn3D.z = Math.sin(angle + camera.rotation) * radius;  var scaleRatio = focalLength / (focalLength + pointIn3D.z);  pointIn2D.x = pointIn3D.x * scaleRatio;  pointIn2D.y = pointIn3D.y * scaleRatio;  return pointIn2D;};function cube(w, h, d){  points3D = [    point(-w/2, -h/2, -d),    point(w/2, -h/2, -d),    point(w/2, -h/2, d),    point(-w/2, -h/2, d),    point(-w/2, h/2, -d),    point(w/2, h/2, -d),    point(w/2, h/2, d),    point(-w/2, h/2, d)  ];  var points2D = []; // will hold the 2D points  // convert them from 3D to 2D  for (var i = 0; i < points3D.length; i++) {    var p = points3D[i];    points2D[i] = toScreen(p);  }  var items = [];  // top shape  b.beginShape(b.CLOSE);  b.vertex(points2D[0].x, points2D[0].y);  // b.text('0',points2D[0].x, points2D[0].y,20,20);  b.vertex(points2D[1].x, points2D[1].y);  // b.text('1',points2D[1].x, points2D[1].y,20,20);  b.vertex(points2D[2].x, points2D[2].y);  // b.text('2',points2D[2].x, points2D[2].y,20,20);  b.vertex(points2D[3].x, points2D[3].y);  // b.text('3',points2D[3].x, points2D[3].y,20,20);  var top = b.endShape();  // draw the bottom plane  b.beginShape(b.CLOSE);  b.vertex(points2D[4].x, points2D[4].y);  // b.text('4',points2D[4].x, points2D[4].y,20,20);  b.vertex(points2D[5].x, points2D[5].y);  // b.text('5',points2D[5].x, points2D[5].y,20,20);  b.vertex(points2D[6].x, points2D[6].y);  // b.text('6',points2D[6].x, points2D[6].y,20,20);  b.vertex(points2D[7].x, points2D[7].y);  // b.text('7',points2D[7].x, points2D[7].y,20,20);  var bottom = b.endShape();//  // // front  b.beginShape(b.CLOSE);  b.vertex(points2D[0].x, points2D[0].y);  b.vertex(points2D[1].x, points2D[1].y);  b.vertex(points2D[5].x, points2D[5].y);  b.vertex(points2D[4].x, points2D[4].y);  var front = b.endShape();//  // // back  b.beginShape(b.CLOSE);  b.vertex(points2D[3].x, points2D[3].y);  b.vertex(points2D[2].x, points2D[2].y);  b.vertex(points2D[6].x, points2D[6].y);  b.vertex(points2D[7].x, points2D[7].y);  var back = b.endShape();//  // left  b.beginShape(b.CLOSE);  b.vertex(points2D[0].x, points2D[0].y);  b.vertex(points2D[3].x, points2D[3].y);  b.vertex(points2D[7].x, points2D[7].y);  b.vertex(points2D[4].x, points2D[4].y);  var left = b.endShape();//  // right  b.beginShape(b.CLOSE);  b.vertex(points2D[1].x, points2D[1].y);  b.vertex(points2D[2].x, points2D[2].y);  b.vertex(points2D[6].x, points2D[6].y);  b.vertex(points2D[5].x, points2D[5].y);  var right = b.endShape();//  front.bringToFront();  top.sendToBack();  bottom.sendToBack()  left.sendToBack();  right.sendToBack();  back.sendToBack();  return [top, bottom, front, back, left, right];}function draw() {  b.clear(b.doc()); // clear the current document  b.units(b.MM); // we want to print. use MM instead of default pixels  var doc = b.doc(); // a reference to the current document  // set some preferneces of the document for better handling  doc.documentPreferences.properties = {    pageWidth: pw,    pageHeight: ph  }; // set the page size  doc.viewPreferences.rulerOrigin = RulerOrigin.SPREAD_ORIGIN; // upper left corner  // ----------  // main code goes here  // define some 3D points  b.noFill();  b.pushMatrix(); // push the matrix  b.translate(b.width/2, b.height/2); // to the center of the screen  var planes = cube(50,100,100);  // draw the top plane. Could also be a polygon  b.popMatrix();// reset the matrix  doc.pages[0].groups.add(planes);  // ----------  var fname = File($.fileName).parent.fsName + '/' + ($.fileName.split('/')[$.fileName.split('/').length - 1]).split('.')[0] + '.indd';  // b.println(fname);  doc.save(fname, false, 'basil', true);  b.savePNG('out.png');}b.go();